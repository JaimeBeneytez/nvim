
#############################################################
#
# Typescript Snippets
#
#############################################################

snippet exp
	export {$1} from '$2';
	$0

snippet c
	class $1 {
		$0
	}

snippet ce
	class $1 extends $2 {
		$0
	}

snippet ci
	class $1 implements $2 {
		$0
	}

snippet cei
	class $1 extends $2 implements $3 {
		$0
	}

snippet exc
	export class $1 {
		$0
	}

snippet exce
	export class $1 extends $2 {
		$0
	}

snippet exci
	export class $1 implements $2 {
		$0
	}

snippet excei
	export class $1 extends $2 implements $3 {
		$0
	}

snippet i
	interface $1 {
		$0
	}

snippet ie
	interface $1 extends $2 {
		$0
	}

snippet exi
	export interface $1 {
		$0
	}

snippet exie
	export interface $1 extends $2 {
		$0
	}

snippet cons
	constructor($1) {
		$0
	}

snippet get
	get $1(): $2 {
		return this._$1;
	}
	$0

snippet set
	set $1($2: $3) {
		this._$2 = $2;
	}

	$0

snippet getset
	get $1(): $2 {
		return this._$1;
	}
	set $1($1: $2) {
		this._$1 = $1;
	}

	$0

snippet v
	let $1 = $2;
	$0

snippet fun
	function ${1:function_name}($2) {
		$0
	}

snippet f
	function($1) {
		$0
	}

snippet s=
	$1 => $0

snippet =
	( $1 ) => $0

snippet b=
	( $1 ) => {
		$0
	}

snippet pubsm
	public static $1($2):  $3 {
		$0
	}

snippet pubm
	public $1($2): $3 {
		$0
	}

snippet privm
	private _$1($2): $3 {
		$0
	}

snippet pubsa
	public static $1: $2;
		$0

snippet puba
	public $1: $2;
		$0

snippet priva
	private _$1: $2;
		$0

snippet if
	if (${1:true}) {
		$0
	}

snippet ife
	if (${1:true}) {
		$2
	} else {
		$0
	}

snippet ter
	${1:/* condition */} ? ${2:/* if true */} :  ${0:/* if false */}

snippet try
	try {
		$1
	} catch (${2:e}: $3) {
		${0:/* handle error */}
	}

snippet ret
	return ${0:result};

snippet for
	for (let ${1: i} = 0; $1 < ${2:arr}.length; $1++) {
		${3: v} = $2[$1];${0: }
	}

snippet forr
	for (let ${1:i} = ${2:arr}.length - 1; $1 >= 0; $1--) {
		${3: v} = $2[$1];${0: }
	}

snippet wh
	while (${1:/* condition */}) {
		$0
	}

snippet do
	do {
		$0
	} while (${1:/* condition */});

snippet fori
	for (let ${1:prop} in ${2:object}) {
		${0: $2[$1]}
	}

snippet /**
	/******************************************************
	 *
	 * ${1:description}
	 *
	 ******************************************************/

	$0

snippet log
	console.log($1)
	$0

snippet warn
	console.warn($1)
	$0

snippet error
	console.erroe($1)
	$0




